## grub2
#
# grub-script port of isodetect.lua from Super Grub2 Disk[1]
# by Ximin Luo; I release this into the public domain.
#
# isodetect.lua (Jordan Uggla) is based on listisos.lu, bootiso.lua (JustRon[2])
# All of these are released into the public domain.
#
# [1] http://www.supergrubdisk.org/
# [2] http://ubuntuforums.org/showthread.php?t=1288604
#

# THIS SCRIPT CURRENTLY WILL NOT RUN.
#
# It assumes the following (TODO) features:
#
# - local keyword for vars inside functions
# - return keyword for functions
# - ! syntax for inverting the return-value of a command
# - $() syntax for storing the output of a command into a variable; must also work inside double quotes
#
# It assumes the following done-but-not-released features:
#
# - functions take positional parameters (already in trunk)
# - break keyword for loops (already in trunk)
# - * expansion for devices and files; must also work in the form "$PATH"/* (already in branch:osdetect)
# - basename [FULLPATH] available as a command, gets rid of directory string (regex -s in branch:osdetect)
# - pathname [FULLPATH] available as a command, gets rid of device string (regex -s in branch:osdetect)
# - dynamic menuentry syntax (already in branch:osdetect)
#

# Show an error
function error_entry # (abspath, loopdev, message)
{
	local abspath="$1"
	local loopdev="$2"
	local message="$3"

	menuentry "Unsupported ISO: $abspath" "$abspath" "$loopdev" "$message" {

		echo "Error: $3"
		echo ""
		echo -n "The iso file $1 is not supported "
		echo -n "by Super GRUB2 disk. The most likely reason is that the iso is not loop "
		echo -n "bootable. An iso must be specifically designed to read its root "
		echo -n "filesystem from an iso file rather than looking for it in your CDROM "
		echo -n "drive. It is impossible to boot an iso file not specifically designed "
		echo -n "this way with GRUB or any other bootloader."
		echo ""
		echo ""
		echo -n "If you believe that this iso file is loop bootable it is mounted as "
		echo -n "($2) so you can view its contents in the "
		echo -n "grub shell and try to boot it yourself. If there are any distributions "
		echo -n "that you know are loop bootable but are not currently supported by this "
		echo -n "script please check that you are using the latest version of Super GRUB2 "
		echo -n "Disk then send the commands required to boot the iso to "
		echo -n "supergrub-english@lists.berlios.de so support can be added. Or even " ..
		echo -n "better, convince them to ship a loopback.cfg on their isos:"
		echo ""
		echo ""
		echo "http://www.supergrubdisk.org/wiki/loopback.cfg for more info"
	}
}

# Add a menu entry for a GNU/Linux live system
function linux_entry # (abspath, loopdev, title, linux, initrd, params)
{
	local abspath="$1"
	local loopdev="$2"
	local title="$3"
	local linux="$4" # should include ($loopdev) already
	local initrd="$5" # should include ($loopdev) already
	local params="$6"

	if ! [ -f "$linux" ]; then
		error_entry "$abspath" "$loopdev" "cannot find linux image $linux"
	elif ! [ -f "$initrd" ]; then
		error_entry "$abspath" "$loopdev" "cannot find initrd image $initrd"
	else
		menuentry "$title" "$linux" "$initrd" {
			linux "$1" $params
			initrd "$2"
		}
		return 0
	fi

	return 1
}

allowed_pattern='^[a-zA-Z0-9_\-\./]*$'
# Check that filename contains only allowed characters
function allowed_name # (abspath)
{
	local abspath="$1"
	regexp "$allowed_pattern" "$(pathname "$abspath")"
}

# Mount the iso file as a loopback device
function mount_iso # (abspath, loopdev)
{
	local abspath="$1"
	local loopdev="$2"

	if ! allowed_name "$abspath"; then
		menuentry "Error: $abspath has unallowed characters" "$allowed_pattern" {
			echo -n "Only alphanumeric characters, periods, underscores, and dashes "
			echo -n "are allowed as part of the filename, for compatibility reasons. "
			echo -n "The exact regex pattern is: $1"
			echo ""
		}
	elif [ -z "$abspath" ]; then
		error_entry "$abspath" "$loopdev" "\$abspath is undefined"
	elif ! [ -f "$abspath" ]; then
		error_entry "$abspath" "$loopdev" "Cannot find isofile $abspath"
	else
		loopmsg="$(loopback "$loopdev" "$abspath")"
		if [ $? -ne 0 ]; then
			error_entry "$abspath" "$loopdev" "Cannot load ISO: $loopmsg"
		else
			return 0
		fi
	fi
	return 1
}

# Return the first file within a directory that matches a pattern
function find_file # (dirpath, pattern)
{
	local dirpath="$1"
	local pattern="$2"

	for f in "$dirpath"/*; do
		if [ -f "$f" ]; then
			if regexp "$match" "$f"; then
				echo "$f"
				return 0
			fi
		fi
	done
	return 1
}

# Detect the live system type and boots it
function iso_detect # (abspath, langcode)
{
	local abspath="$1"
	local langcode="$2"

	if [ -z "$langcode" ]; then langcode="us"; fi

	# Linux shouldn't be passed the grub device name, just the relative path
	local relpath="$(pathname "$abspath")"
	local loopdev="$(basename "$abspath")"

	if ! mount_iso "$abspath" "$loopdev"; then return 1; fi

	# Any distro providing a loopback.cfg
	local loopcfg=""
	for path in "/boot/grub/loopback.cfg" "/grub/loopback.cfg"; do
		if [ -f "($loopdev)$path" ]; then
			loopcfg="$path"
			break
		fi
	done

	if [ -n "$loopcfg" ]; then
		menuentry "Boot $abspath" "$relpath" "$loopdev" "$loopcfg" {
			set iso_path="$1"
			export iso_path
			set root="($2)"
			configfile "$3"
		}
	elif autodetect; then
		# parse files
		# TODO
	else
		error_entry "$abspath" "$loopdev" "Unsupported ISO type"
		return 1
	fi

	return 0
}

# Scan a device for .iso files, attempting to add each one
function iso_scan_device # (isodirs, device, fs, uuid)
{
	local isodirs="$1"
	local device="$2"
	local fs="$3"
	local uuid="$4"

	local found_iso=false
	for dir in $isodirs; do
		for path in "($device)/$dir"/* "($device)/boot/$dir"/*; do
			if regexp '\.[iI][sS][oO]$' "$path"; then
				iso_detect "$path" "$langcode"
				found_iso=true
			fi
		done
	done

	$found_iso
}

# Scan all devices
function iso_scan # (isodirs)
{
	local isodirs="$1"

	local found_iso=false
	for dev in *; do
		if iso_scan_device "$isodirs" "$dev"; then
			found_iso=true
		fi
	done

	$found_iso
}

if [ "$autoscan" -ne "no" ]; then

	if [ -z "$isodirs" ]; then
		isodirs="boot-isos bootisos bootiso iso img"
	fi

	if ! iso_scan "$isodirs"; then
		echo -n "Error: No iso files were found in the [$isodirs] subdirectories of "
		echo -n "/ and /boot/ of any device. To search inside different directories, "
		echo -n "set the environment variable isodirs. "
		echo ""
		echo ""
		echo -n "To switch off auto-detection, set autoscan=no. The function iso_scan "
		echo -n "can be called with a list of directories as its first parameter. "
		echo ""
	fi

fi

